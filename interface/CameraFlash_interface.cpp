/*
 * WARNING: this is an autogenerated file and will be overwritten by
 * the extension interface script.
 */

#include "s3eExt.h"
#include "IwDebug.h"
#include "s3eDevice.h"


#include "CameraFlash.h"

/**
 * Definitions for functions types passed to/from s3eExt interface
 */
typedef  s3eResult(*CameraFlashRegister_t)(CameraFlashCallback cbid, s3eCallback fn, void* userData);
typedef  s3eResult(*CameraFlashUnRegister_t)(CameraFlashCallback cbid, s3eCallback fn);
typedef       void(*TurnFlashOn_t)(bool turnOn);
typedef       void(*TurnFlashOff_t)();

/**
 * struct that gets filled in by CameraFlashRegister
 */
typedef struct CameraFlashFuncs
{
    CameraFlashRegister_t m_CameraFlashRegister;
    CameraFlashUnRegister_t m_CameraFlashUnRegister;
    TurnFlashOn_t m_TurnFlashOn;
    TurnFlashOff_t m_TurnFlashOff;
} CameraFlashFuncs;

static CameraFlashFuncs g_Ext;
static bool g_GotExt = false;
static bool g_TriedExt = false;
static bool g_TriedNoMsgExt = false;

static bool _extLoad()
{
    if (!g_GotExt && !g_TriedExt)
    {
        s3eResult res = s3eExtGetHash(0x66012dc, &g_Ext, sizeof(g_Ext));
        if (res == S3E_RESULT_SUCCESS)
            g_GotExt = true;
        else
            s3eDebugAssertShow(S3E_MESSAGE_CONTINUE_STOP_IGNORE,                 "error loading extension: CameraFlash");
            
        g_TriedExt = true;
        g_TriedNoMsgExt = true;
    }

    return g_GotExt;
}

static bool _extLoadNoMsg()
{
    if (!g_GotExt && !g_TriedNoMsgExt)
    {
        s3eResult res = s3eExtGetHash(0x66012dc, &g_Ext, sizeof(g_Ext));
        if (res == S3E_RESULT_SUCCESS)
            g_GotExt = true;
        g_TriedNoMsgExt = true;
        if (g_TriedExt)
            g_TriedExt = true;
    }

    return g_GotExt;
}

s3eBool CameraFlashAvailable()
{
    _extLoadNoMsg();
    return g_GotExt ? S3E_TRUE : S3E_FALSE;
}

s3eResult CameraFlashRegister(CameraFlashCallback cbid, s3eCallback fn, void* userData)
{
    IwTrace(CAMERAFLASH_VERBOSE, ("calling CameraFlash[0] func: CameraFlashRegister"));

    if (!_extLoad())
        return S3E_RESULT_ERROR;

#ifdef __mips
    // For MIPs platform we do not have asm code for stack switching 
    // implemented. So we make LoaderCallStart call manually to set GlobalLock
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    s3eResult ret = g_Ext.m_CameraFlashRegister(cbid, fn, userData);

#ifdef __mips
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

s3eResult CameraFlashUnRegister(CameraFlashCallback cbid, s3eCallback fn)
{
    IwTrace(CAMERAFLASH_VERBOSE, ("calling CameraFlash[1] func: CameraFlashUnRegister"));

    if (!_extLoad())
        return S3E_RESULT_ERROR;

#ifdef __mips
    // For MIPs platform we do not have asm code for stack switching 
    // implemented. So we make LoaderCallStart call manually to set GlobalLock
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    s3eResult ret = g_Ext.m_CameraFlashUnRegister(cbid, fn);

#ifdef __mips
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

void TurnFlashOn(bool turnOn)
{
    IwTrace(CAMERAFLASH_VERBOSE, ("calling CameraFlash[2] func: TurnFlashOn"));

    if (!_extLoad())
        return;

#ifdef __mips
    // For MIPs platform we do not have asm code for stack switching 
    // implemented. So we make LoaderCallStart call manually to set GlobalLock
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_TurnFlashOn(turnOn);

#ifdef __mips
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

void TurnFlashOff()
{
    IwTrace(CAMERAFLASH_VERBOSE, ("calling CameraFlash[3] func: TurnFlashOff"));

    if (!_extLoad())
        return;

#ifdef __mips
    // For MIPs platform we do not have asm code for stack switching 
    // implemented. So we make LoaderCallStart call manually to set GlobalLock
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_TurnFlashOff();

#ifdef __mips
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}
